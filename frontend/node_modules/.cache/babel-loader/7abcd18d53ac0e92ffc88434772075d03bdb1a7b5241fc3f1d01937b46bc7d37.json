{"ast":null,"code":"import axios from 'axios';\nclass ApiService {\n  constructor() {\n    this.api = void 0;\n    this.api = axios.create({\n      baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000/api',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n\n    // Request interceptor to add auth token\n    this.api.interceptors.request.use(config => {\n      const token = localStorage.getItem('access_token');\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    });\n\n    // Response interceptor for error handling\n    this.api.interceptors.response.use(response => response, error => {\n      var _error$response;\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n        localStorage.removeItem('access_token');\n        window.location.href = '/login';\n      }\n      return Promise.reject(error);\n    });\n  }\n\n  // Authentication\n  async login(credentials) {\n    const response = await this.api.post('/auth/login', credentials);\n    localStorage.setItem('access_token', response.data.access_token);\n    return response.data;\n  }\n  async register(userData) {\n    const response = await this.api.post('/auth/register', userData);\n    localStorage.setItem('access_token', response.data.access_token);\n    return response.data;\n  }\n  async getCurrentUser() {\n    const response = await this.api.get('/auth/me');\n    return response.data;\n  }\n  logout() {\n    localStorage.removeItem('access_token');\n  }\n\n  // Meals\n  async createMealLog(mealData) {\n    const response = await this.api.post('/meals/', mealData);\n    return response.data;\n  }\n  async getMealLogs(skip = 0, limit = 50) {\n    const response = await this.api.get(`/meals/?skip=${skip}&limit=${limit}`);\n    return response.data;\n  }\n  async getMealLog(mealId) {\n    const response = await this.api.get(`/meals/${mealId}`);\n    return response.data;\n  }\n\n  // Carbon footprint\n  async calculateCarbonFootprint(data) {\n    const response = await this.api.post('/footprint/calculate', data);\n    return response.data;\n  }\n  async getDailyCarbonSummary(days = 7) {\n    const response = await this.api.get(`/footprint/daily-summary?days=${days}`);\n    return response.data;\n  }\n\n  // Dashboard\n  async getDashboardData() {\n    const response = await this.api.get('/dashboard/');\n    return response.data;\n  }\n\n  // Swaps\n  async getSwapRecommendations(mealId) {\n    const response = await this.api.get(`/swaps/${mealId}`);\n    return response.data;\n  }\n  async acceptSwapRecommendation(swapId, accepted) {\n    const response = await this.api.post('/swaps/accept', {\n      swap_id: swapId,\n      accepted\n    });\n    return response.data;\n  }\n\n  // Challenges\n  async getAvailableChallenges() {\n    const response = await this.api.get('/challenges/available');\n    return response.data;\n  }\n  async getMyChallenges() {\n    const response = await this.api.get('/challenges/my-challenges');\n    return response.data;\n  }\n  async joinChallenge(challengeId) {\n    const response = await this.api.post('/challenges/join', {\n      challenge_id: challengeId\n    });\n    return response.data;\n  }\n  async updateChallengeProgress(challengeId, progressValue) {\n    const response = await this.api.patch('/challenges/update-progress', {\n      challenge_id: challengeId,\n      progress_value: progressValue\n    });\n    return response.data;\n  }\n\n  // Generic GET method\n  async get(url) {\n    const response = await this.api.get(url);\n    return response.data;\n  }\n\n  // Generic POST method\n  async post(url, data) {\n    const response = await this.api.post(url, data);\n    return response.data;\n  }\n\n  // Badges\n  async getBadges() {\n    const response = await this.api.get('/gamification/badges');\n    return response.data;\n  }\n  async getUserBadges() {\n    const response = await this.api.get('/gamification/my-badges');\n    return response.data;\n  }\n}\nexport const apiService = new ApiService();","map":{"version":3,"names":["axios","ApiService","constructor","api","create","baseURL","process","env","REACT_APP_API_URL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","response","error","_error$response","status","removeItem","window","location","href","Promise","reject","login","credentials","post","setItem","data","access_token","register","userData","getCurrentUser","get","logout","createMealLog","mealData","getMealLogs","skip","limit","getMealLog","mealId","calculateCarbonFootprint","getDailyCarbonSummary","days","getDashboardData","getSwapRecommendations","acceptSwapRecommendation","swapId","accepted","swap_id","getAvailableChallenges","getMyChallenges","joinChallenge","challengeId","challenge_id","updateChallengeProgress","progressValue","patch","progress_value","url","getBadges","getUserBadges","apiService"],"sources":["/Users/kimchung-yeon/인개인개/커서뭐될래/greenflow/frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosResponse } from 'axios';\nimport {\n  AuthResponse,\n  LoginRequest,\n  RegisterRequest,\n  User,\n  MealLog,\n  MealCreate,\n  CarbonCalculationRequest,\n  CarbonCalculationResponse,\n  DashboardData,\n  SwapResponse,\n  Challenge,\n  UserChallenge\n} from '../types';\n\nclass ApiService {\n  private api: AxiosInstance;\n\n  constructor() {\n    this.api = axios.create({\n      baseURL: process.env.REACT_APP_API_URL || 'http://localhost:8000/api',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    // Request interceptor to add auth token\n    this.api.interceptors.request.use((config) => {\n      const token = localStorage.getItem('access_token');\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    });\n\n    // Response interceptor for error handling\n    this.api.interceptors.response.use(\n      (response) => response,\n      (error) => {\n        if (error.response?.status === 401) {\n          localStorage.removeItem('access_token');\n          window.location.href = '/login';\n        }\n        return Promise.reject(error);\n      }\n    );\n  }\n\n  // Authentication\n  async login(credentials: LoginRequest): Promise<AuthResponse> {\n    const response = await this.api.post<AuthResponse>('/auth/login', credentials);\n    localStorage.setItem('access_token', response.data.access_token);\n    return response.data;\n  }\n\n  async register(userData: RegisterRequest): Promise<AuthResponse> {\n    const response = await this.api.post<AuthResponse>('/auth/register', userData);\n    localStorage.setItem('access_token', response.data.access_token);\n    return response.data;\n  }\n\n  async getCurrentUser(): Promise<User> {\n    const response = await this.api.get<User>('/auth/me');\n    return response.data;\n  }\n\n  logout(): void {\n    localStorage.removeItem('access_token');\n  }\n\n  // Meals\n  async createMealLog(mealData: MealCreate): Promise<MealLog> {\n    const response = await this.api.post<MealLog>('/meals/', mealData);\n    return response.data;\n  }\n\n  async getMealLogs(skip: number = 0, limit: number = 50): Promise<MealLog[]> {\n    const response = await this.api.get<MealLog[]>(`/meals/?skip=${skip}&limit=${limit}`);\n    return response.data;\n  }\n\n  async getMealLog(mealId: number): Promise<MealLog> {\n    const response = await this.api.get<MealLog>(`/meals/${mealId}`);\n    return response.data;\n  }\n\n  // Carbon footprint\n  async calculateCarbonFootprint(data: CarbonCalculationRequest): Promise<CarbonCalculationResponse> {\n    const response = await this.api.post<CarbonCalculationResponse>('/footprint/calculate', data);\n    return response.data;\n  }\n\n  async getDailyCarbonSummary(days: number = 7): Promise<any[]> {\n    const response = await this.api.get(`/footprint/daily-summary?days=${days}`);\n    return response.data;\n  }\n\n  // Dashboard\n  async getDashboardData(): Promise<DashboardData> {\n    const response = await this.api.get<DashboardData>('/dashboard/');\n    return response.data;\n  }\n\n  // Swaps\n  async getSwapRecommendations(mealId: number): Promise<SwapResponse> {\n    const response = await this.api.get<SwapResponse>(`/swaps/${mealId}`);\n    return response.data;\n  }\n\n  async acceptSwapRecommendation(swapId: number, accepted: boolean): Promise<any> {\n    const response = await this.api.post('/swaps/accept', { swap_id: swapId, accepted });\n    return response.data;\n  }\n\n  // Challenges\n  async getAvailableChallenges(): Promise<Challenge[]> {\n    const response = await this.api.get<Challenge[]>('/challenges/available');\n    return response.data;\n  }\n\n  async getMyChallenges(): Promise<UserChallenge[]> {\n    const response = await this.api.get<UserChallenge[]>('/challenges/my-challenges');\n    return response.data;\n  }\n\n  async joinChallenge(challengeId: number): Promise<any> {\n    const response = await this.api.post('/challenges/join', { challenge_id: challengeId });\n    return response.data;\n  }\n\n  async updateChallengeProgress(challengeId: number, progressValue: number): Promise<any> {\n    const response = await this.api.patch('/challenges/update-progress', {\n      challenge_id: challengeId,\n      progress_value: progressValue\n    });\n    return response.data;\n  }\n\n  // Generic GET method\n  async get<T = any>(url: string): Promise<T> {\n    const response = await this.api.get<T>(url);\n    return response.data;\n  }\n\n  // Generic POST method\n  async post<T = any>(url: string, data?: any): Promise<T> {\n    const response = await this.api.post<T>(url, data);\n    return response.data;\n  }\n\n  // Badges\n  async getBadges(): Promise<any[]> {\n    const response = await this.api.get('/gamification/badges');\n    return response.data;\n  }\n\n  async getUserBadges(): Promise<any[]> {\n    const response = await this.api.get('/gamification/my-badges');\n    return response.data;\n  }\n}\n\nexport const apiService = new ApiService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}